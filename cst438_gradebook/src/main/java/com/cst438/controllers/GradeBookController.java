package com.cst438.controllers;

import java.util.ArrayList;
import java.util.List;
import java.sql.Date;
import java.text.ParseException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.temporal.TemporalAccessor;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.oauth2.core.user.OAuth2User;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ResponseStatusException;

import com.cst438.domain.Assignment;
import com.cst438.domain.AssignmentListDTO;
import com.cst438.domain.AssignmentListDTO.AssignmentDTO;
import com.cst438.domain.AssignmentGrade;
import com.cst438.domain.AssignmentGradeRepository;
import com.cst438.domain.AssignmentRepository;
import com.cst438.domain.Course;
import com.cst438.domain.CourseDTOG;
import com.cst438.domain.CourseRepository;
import com.cst438.domain.Enrollment;
import com.cst438.domain.GradebookDTO;
import com.cst438.services.RegistrationService;

@RestController
//@CrossOrigin(origins = {"http://localhost:3000", "https://jt-cst438-fe.herokuapp.com/"})
@CrossOrigin(origins = {"http://localhost:3000"})
public class GradeBookController {
	
	@Autowired
	AssignmentRepository assignmentRepository;
	
	@Autowired
	AssignmentGradeRepository assignmentGradeRepository;
	
	@Autowired
	CourseRepository courseRepository;
	
	@Autowired
	RegistrationService registrationService;

	
/***** GET *****/
	// get assignments for an instructor that need grading
	@GetMapping("/gradebook")
	public AssignmentListDTO getAssignmentsNeedGradin(@AuthenticationPrincipal OAuth2User principal) {
		
		String email = "dwisneski@csumb.edu";  // user name (should be instructor's email) 
		
		List<Assignment> assignments = assignmentRepository.findNeedGradingByEmail(email);
		AssignmentListDTO result = new AssignmentListDTO();
		for (Assignment a: assignments) {
			result.assignments.add(new AssignmentListDTO.AssignmentDTO(a.getId(), a.getCourse().getCourse_id(), a.getName(), a.getDueDate().toString() , a.getCourse().getTitle()));
		}
		return result;
	}
		
	@GetMapping("/gradebook/{id}")
	public GradebookDTO getGradebook(@PathVariable("id") Integer assignmentId, @AuthenticationPrincipal OAuth2User principal) {
		
	   // gradbook for sturdent
		String email = "dwisneski@csumb.edu";  // user name (should be instructor's email) 
		Assignment assignment = checkAssignment(assignmentId, email);
		
		
		
		//gradebook for professor
		// get the enrollment for the course
		//  for each student, get the current grade for assignment, 
		//   if the student does not have a current grade, create an empty grade
		GradebookDTO gradebook = new GradebookDTO();
		gradebook.assignmentId= assignmentId;
		gradebook.assignmentName = assignment.getName();
		for (Enrollment e : assignment.getCourse().getEnrollments()) {
			GradebookDTO.Grade grade = new GradebookDTO.Grade();
			grade.name = e.getStudentName();
			grade.email = e.getStudentEmail();
			// does student have a grade for this assignment
			AssignmentGrade ag = assignmentGradeRepository.findByAssignmentIdAndStudentEmail(assignmentId,  grade.email);
			if (ag != null) {
				grade.grade = ag.getScore();
				grade.assignmentGradeId = ag.getId();
			} else {
				grade.grade = "";
				AssignmentGrade agNew = new AssignmentGrade(assignment, e);
				agNew = assignmentGradeRepository.save(agNew);
				grade.assignmentGradeId = agNew.getId();  // key value generated by database on save.
			}
			gradebook.grades.add(grade);
		}
		return gradebook;
	}
	
/***** POST *****/	
	@PostMapping("/course/{course_id}/finalgrades")
	@Transactional
	public void calcFinalGrades(@PathVariable int course_id) {
		System.out.println("Gradebook - calcFinalGrades for course " + course_id);
		
		// check that this request is from the course instructor 
		String email = "dwisneski@csumb.edu";  // user name (should be instructor's email) 
		
		Course c = courseRepository.findByCourse_id(course_id);
		if (!c.getInstructor().equals(email)) {
			throw new ResponseStatusException( HttpStatus.UNAUTHORIZED, "Not Authorized. " );
		}
		
		CourseDTOG cdto = new CourseDTOG();
		cdto.course_id = course_id;
		cdto.grades = new ArrayList<>();
		for (Enrollment e: c.getEnrollments()) {
			double total=0.0;
			int count = 0;
			for (AssignmentGrade ag : e.getAssignmentGrades()) {
				count++;
				total = total + Double.parseDouble(ag.getScore());
			}
			double average = total/count;
			CourseDTOG.GradeDTO gdto = new CourseDTOG.GradeDTO();
			gdto.grade=letterGrade(average);
			gdto.student_email=e.getStudentEmail();
			gdto.student_name=e.getStudentName();
			cdto.grades.add(gdto);
			System.out.println("Course="+course_id+" Student="+e.getStudentEmail()+" grade="+gdto.grade);
		}
		
		registrationService.sendFinalGrades(course_id, cdto);
	}
	
	private String letterGrade(double grade) {
		if (grade >= 90) return "A";
		if (grade >= 80) return "B";
		if (grade >= 70) return "C";
		if (grade >= 60) return "D";
		return "F";
	}
	
	/**
	 * Creates new assignment given an AssignmentDTO object
	 * params are in the request body json formatted
	 * @param assignment - AssignmentDTO
	 * @throws ParseException 
	 */
	@PostMapping("/gradebook/addAssignment")
	@Transactional
	public void addAssignment(@RequestBody AssignmentDTO assignment, @AuthenticationPrincipal OAuth2User principal) throws ParseException {	   
	    //only an instructor can add a new assignment for a course they are teaching
     String authEmail = principal.getAttribute("email");
     Course course = courseRepository.findByCourse_id(assignment.courseId);
     if(course.getInstructor().toLowerCase() != authEmail.toLowerCase()) {
        throw new ResponseStatusException( HttpStatus.UNAUTHORIZED, "Not Authorized");
     }        
     
     Assignment assign = new Assignment();
     java.text.DateFormat df = new java.text.SimpleDateFormat("MM-dd-yyyy h:mma");
     //TODO: convert from local to UTC
     long dueDate = df.parse(assignment.dueDate).getTime();	     
     assign.setDueDate(new Date(dueDate));
     assign.setName(assignment.assignmentName);
     assign.setCourse(courseRepository.findByCourse_id(assignment.courseId));        
     
     assignmentRepository.save(assign);   
   }// addAssignment
	
/***** PUT *****/
	@PutMapping("/gradebook/{id}")
	@Transactional
	public void updateGradebook (@RequestBody GradebookDTO gradebook, @PathVariable("id") Integer assignmentId, @AuthenticationPrincipal OAuth2User principal) {
		
	   //only instructor can set assignment grade
		String email = principal.getAttribute("email");  // user name (should be instructor's email)
		try {
		   checkAssignment(assignmentId, email);  // check that user name matches instructor email of the course.   
		}catch(Exception ex) {
		   throw ex;
		}
		// for each grade in gradebook, update the assignment grade in database 
		
		for (GradebookDTO.Grade g : gradebook.grades) {
			AssignmentGrade ag = assignmentGradeRepository.findById(g.assignmentGradeId);
			if (ag == null) {
				throw new ResponseStatusException( HttpStatus.BAD_REQUEST, "Invalid grade primary key. "+g.assignmentGradeId);
			}
			ag.setScore(g.grade);
			assignmentGradeRepository.save(ag);
		}
		
	}
	
	
	/**
	 * queries the selected assignment by id path variable
	 * changes the assignment name passed from the request body
	 * saves the assignment
	 * @param name - new assignment name
	 * @param assignmentId - Id of the assignment to modify
	 */
	@PutMapping("/gradebook/editAssignment/{id}")
	@Transactional
	public void editAssignment(@RequestBody String name, @PathVariable("id") int assignmentId) {
	   
	   String email = "dwisneski@csumb.edu";  // user name (should be instructor's email)      
	   Assignment assignment = checkAssignment(assignmentId, email);  // check that user name matches instructor email of the course.	   
                       
      if(assignment == null) {
         throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Invalid assignment Id");
      }
      
      assignment.setName(name);
      assignmentRepository.save(assignment);
	}// editAssignment
	
	

	private Assignment checkAssignment(int assignmentId, String email) {
		// get assignment 
		Assignment assignment = assignmentRepository.findById(assignmentId);
		if (assignment == null) {
			throw new ResponseStatusException( HttpStatus.BAD_REQUEST, "Assignment not found. "+assignmentId );
		}
		// check that user is the course instructor
		if (!assignment.getCourse().getInstructor().equals(email)) {
			throw new ResponseStatusException( HttpStatus.UNAUTHORIZED, "Not Authorized. " );
		}
		
		return assignment;
	}
	
	
	/***** DELETE *****/
	
	/**
	 * deletes an assignment if permitted and exists and no grades exist for the assignment
	 * @param assignmentId - ID of the assignment to delete
	 */
	@DeleteMapping("/gradebook/deleteAssignment/{id}")
	@Transactional	
	public void deleteAssignment(@PathVariable("id") int assignmentId){
	   
      String email = "dwisneski@csumb.edu";  // user name (should be instructor's email)
	   Assignment delAssign = checkAssignment(assignmentId, email);	   
	   if(delAssign.getNeedsGrading() == 0) {
	      throw new ResponseStatusException( HttpStatus.BAD_REQUEST, "Assignment already graded. "+assignmentId );	      
	   }
   
	   assignmentRepository.delete(delAssign);
	}
	


}// GradeBookController
